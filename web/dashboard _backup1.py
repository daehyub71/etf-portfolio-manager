# ==========================================
# dashboard.py - Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ ÎåÄÏãúÎ≥¥Îìú (ÏàòÏ†ï Î≤ÑÏ†Ñ)
# ==========================================

import pandas as pd
import numpy as np
import sqlite3
import json
import time
from datetime import datetime, timedelta
import sys
import os
from pathlib import Path

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏ Í≤ΩÎ°ú Ï∂îÍ∞Ä
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

# Streamlit import ÏãúÎèÑ
try:
    import streamlit as st
    import plotly.graph_objects as go
    import plotly.express as px
    from plotly.subplots import make_subplots
    STREAMLIT_AVAILABLE = True
    print("‚úÖ Streamlit ÏÇ¨Ïö© Í∞ÄÎä•")
except ImportError:
    STREAMLIT_AVAILABLE = False
    print("‚ö†Ô∏è Streamlit ÏóÜÏùå - CLI Î™®ÎìúÎ°ú Ïã§Ìñâ")
    print("pip install streamlit plotly ÌõÑ Ïõπ ÎåÄÏãúÎ≥¥Îìú ÏÇ¨Ïö© Í∞ÄÎä•")

# ÌîÑÎ°úÏ†ùÌä∏ Î™®Îìà import (Ïò§Î•ò Ï≤òÎ¶¨ Ìè¨Ìï®)
modules_loaded = {}

# ETFUpdateManager import ÏãúÎèÑ (Ïò¨Î∞îÎ•∏ ÌÅ¥ÎûòÏä§ Ïù¥Î¶Ñ ÏÇ¨Ïö©)
try:
    from core.update_manager import ETFUpdateManager
    modules_loaded['ETFUpdateManager'] = True
    print("‚úÖ ETFUpdateManager Î°úÎìú ÏÑ±Í≥µ")
except ImportError as e:
    modules_loaded['ETFUpdateManager'] = False
    print(f"‚ö†Ô∏è ETFUpdateManager Î°úÎìú Ïã§Ìå®: {e}")
    
    # ÎçîÎØ∏ ETFUpdateManager
    class ETFUpdateManager:
        def __init__(self, db_path="etf_universe.db"):
            self.db_path = db_path
            print(f"üîß ÎçîÎØ∏ ETFUpdateManager ÏÇ¨Ïö© (DB: {db_path})")
        
        def get_current_status(self):
            return {
                'is_updating': False,
                'progress': 100.0,
                'last_update': '2024-12-22 18:00:00'
            }
        
        def quick_health_check(self):
            return {
                'total_etfs': 17,
                'updated_etfs': 15,
                'price_available': 15,
                'recent_updates_24h': 10,
                'health_score': 85.0,
                'status': 'healthy'
            }
        
        def get_update_history(self, limit=5):
            return [
                {
                    'start_time': '2024-12-22 18:00:00',
                    'success_rate': 85.0,
                    'successful_updates': 15,
                    'failed_updates': 2,
                    'total_etfs': 17,
                    'total_duration': 45.0
                },
                {
                    'start_time': '2024-12-21 18:00:00',
                    'success_rate': 90.0,
                    'successful_updates': 16,
                    'failed_updates': 1,
                    'total_etfs': 17,
                    'total_duration': 38.0
                }
            ]
        
        def batch_update_all_etfs(self, max_etfs=None, delay_between_updates=1.0):
            print(f"üîÑ ÎçîÎØ∏ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ (ÏµúÎåÄ {max_etfs}Í∞ú ETF)")
            time.sleep(2)  # ÏãúÎÆ¨Î†àÏù¥ÏÖò
            
            class Summary:
                total_etfs = max_etfs or 17
                successful_updates = int(0.8 * (max_etfs or 17))
                failed_updates = int(0.2 * (max_etfs or 17))
                success_rate = 80.0
                total_duration = 45.0
            
            return Summary()
        
        def update_single_etf(self, code, name):
            class Result:
                status = "success"
                code = code
                name = name
            
            return Result()

# DatabaseManager import ÏãúÎèÑ
try:
    from data.database_manager import DatabaseManager
    modules_loaded['DatabaseManager'] = True
    print("‚úÖ DatabaseManager Î°úÎìú ÏÑ±Í≥µ")
except ImportError:
    modules_loaded['DatabaseManager'] = False
    print("‚ö†Ô∏è DatabaseManager Î°úÎìú Ïã§Ìå®")
    
    class DatabaseManager:
        def __init__(self, db_path="data"):
            self.db_path = db_path

# ETFUniverse import ÏãúÎèÑ
try:
    from data.etf_universe import ETFUniverse
    modules_loaded['ETFUniverse'] = True
    print("‚úÖ ETFUniverse Î°úÎìú ÏÑ±Í≥µ")
except ImportError:
    modules_loaded['ETFUniverse'] = False
    print("‚ö†Ô∏è ETFUniverse Î°úÎìú Ïã§Ìå®")
    
    class ETFUniverse:
        def __init__(self, db_path=None):
            self.db_path = db_path

# Í∞ÑÎã®Ìïú ETF Î∂ÑÏÑùÍ∏∞ ÌÅ¥ÎûòÏä§ Íµ¨ÌòÑ
class SimpleETFAnalyzer:
    """Í∞ÑÎã®Ìïú ETF Î∂ÑÏÑùÍ∏∞"""
    
    def __init__(self, db_path: str = "etf_universe.db"):
        self.db_path = db_path
    
    def analyze_category_trends(self) -> pd.DataFrame:
        """Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Ìä∏Î†åÎìú Î∂ÑÏÑù"""
        try:
            conn = sqlite3.connect(self.db_path)
            df = pd.read_sql_query('''
                SELECT 
                    category,
                    COUNT(*) as etf_count,
                    SUM(aum) as total_aum,
                    AVG(expense_ratio) as avg_expense_ratio,
                    AVG(dividend_yield) as avg_dividend_yield
                FROM etf_info
                WHERE category IS NOT NULL
                GROUP BY category
                ORDER BY total_aum DESC
            ''', conn)
            conn.close()
            return df
        except Exception as e:
            print(f"Ïπ¥ÌÖåÍ≥†Î¶¨ Ìä∏Î†åÎìú Î∂ÑÏÑù Ïã§Ìå®: {e}")
            return pd.DataFrame()
    
    def analyze_cost_efficiency(self) -> pd.DataFrame:
        """ÎπÑÏö© Ìö®Ïú®ÏÑ± Î∂ÑÏÑù"""
        try:
            conn = sqlite3.connect(self.db_path)
            df = pd.read_sql_query('''
                SELECT 
                    code, name, category, expense_ratio, aum, dividend_yield,
                    CASE 
                        WHEN expense_ratio > 0 THEN (aum / expense_ratio) 
                        ELSE 0 
                    END as efficiency_ratio
                FROM etf_info
                WHERE expense_ratio > 0 AND aum > 0
                ORDER BY efficiency_ratio DESC
            ''', conn)
            conn.close()
            return df
        except Exception as e:
            print(f"ÎπÑÏö© Ìö®Ïú®ÏÑ± Î∂ÑÏÑù Ïã§Ìå®: {e}")
            return pd.DataFrame()
    
    def compare_etfs(self, etf_codes: list) -> pd.DataFrame:
        """ETF ÎπÑÍµê"""
        try:
            conn = sqlite3.connect(self.db_path)
            codes_str = "','".join(etf_codes)
            df = pd.read_sql_query(f'''
                SELECT 
                    code, name, category, expense_ratio, aum, 
                    dividend_yield, market_price, fund_company
                FROM etf_info
                WHERE code IN ('{codes_str}')
                ORDER BY aum DESC
            ''', conn)
            conn.close()
            return df
        except Exception as e:
            print(f"ETF ÎπÑÍµê Ïã§Ìå®: {e}")
            return pd.DataFrame()

# Í∞ÑÎã®Ìïú ETF Ïä§ÌÅ¨Î¶¨ÎÑà ÌÅ¥ÎûòÏä§ Íµ¨ÌòÑ
class SimpleETFScreener:
    """Í∞ÑÎã®Ìïú ETF Ïä§ÌÅ¨Î¶¨ÎÑà"""
    
    def __init__(self, db_path: str = "etf_universe.db"):
        self.db_path = db_path
    
    def screen_by_criteria(self, criteria: dict) -> pd.DataFrame:
        """Ï°∞Í±¥Î≥Ñ ETF Ïä§ÌÅ¨Î¶¨Îãù"""
        try:
            conn = sqlite3.connect(self.db_path)
            
            # Í∏∞Î≥∏ ÏøºÎ¶¨
            query = "SELECT * FROM etf_info WHERE 1=1"
            params = []
            
            # Ï°∞Í±¥ Ï∂îÍ∞Ä
            if 'expense_ratio_max' in criteria:
                query += " AND expense_ratio <= ?"
                params.append(criteria['expense_ratio_max'])
            
            if 'aum_min' in criteria:
                query += " AND aum >= ?"
                params.append(criteria['aum_min'])
            
            if 'category' in criteria:
                query += " AND category = ?"
                params.append(criteria['category'])
            
            # Ï†ïÎ†¨
            sort_by = criteria.get('sort_by', 'aum')
            sort_direction = criteria.get('sort_direction', 'DESC')
            query += f" ORDER BY {sort_by} {sort_direction}"
            
            # Ï†úÌïú
            limit = criteria.get('limit', 20)
            query += f" LIMIT {limit}"
            
            df = pd.read_sql_query(query, conn, params=params)
            conn.close()
            return df
            
        except Exception as e:
            print(f"ETF Ïä§ÌÅ¨Î¶¨Îãù Ïã§Ìå®: {e}")
            return pd.DataFrame()

class ETFDashboard:
    """ETF Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ ÎåÄÏãúÎ≥¥Îìú"""
    
    def __init__(self, db_path: str = "etf_universe.db"):
        self.db_path = db_path
        self.update_manager = ETFUpdateManager(db_path)
        self.analyzer = SimpleETFAnalyzer(db_path)
        self.screener = SimpleETFScreener(db_path)
        
        print(f"üéØ ÎåÄÏãúÎ≥¥Îìú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å (DB: {db_path})")
    
    def get_market_overview(self) -> dict:
        """ÏãúÏû• Ï†ÑÏ≤¥ ÌòÑÌô©"""
        try:
            conn = sqlite3.connect(self.db_path)
            
            # Í∏∞Î≥∏ ÌÜµÍ≥Ñ
            overview = pd.read_sql_query('''
                SELECT 
                    COUNT(*) as total_etfs,
                    SUM(COALESCE(aum, 0)) as total_aum,
                    AVG(COALESCE(expense_ratio, 0)) as avg_expense_ratio,
                    COUNT(CASE WHEN market_price > 0 THEN 1 END) as price_available,
                    COUNT(CASE WHEN last_updated > datetime('now', '-1 day') THEN 1 END) as updated_24h
                FROM etf_info
            ''', conn).iloc[0]
            
            # Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Î∂ÑÌè¨
            category_stats = pd.read_sql_query('''
                SELECT 
                    COALESCE(category, 'Unknown') as category,
                    COUNT(*) as count,
                    SUM(COALESCE(aum, 0)) as total_aum,
                    AVG(COALESCE(expense_ratio, 0)) as avg_expense
                FROM etf_info
                GROUP BY category
                ORDER BY total_aum DESC
            ''', conn)
            
            # ÏÑ±Í≥º ÏßÄÌëú
            performance = pd.read_sql_query('''
                SELECT 
                    AVG(COALESCE(dividend_yield, 0)) as avg_dividend,
                    AVG(COALESCE(tracking_error, 0)) as avg_tracking_error,
                    COUNT(CASE WHEN dividend_yield > 3 THEN 1 END) as high_dividend_count
                FROM etf_info
                WHERE dividend_yield > 0
            ''', conn).iloc[0]
            
            conn.close()
            
            return {
                'overview': overview.to_dict(),
                'category_stats': category_stats.to_dict('records'),
                'performance': performance.to_dict(),
                'last_update': datetime.now().isoformat()
            }
            
        except Exception as e:
            print(f"‚ùå ÏãúÏû• ÌòÑÌô© Ï°∞Ìöå Ïã§Ìå®: {e}")
            return {}
    
    def get_top_etfs(self, metric: str = 'aum', limit: int = 10) -> pd.DataFrame:
        """ÏÉÅÏúÑ ETF Ï°∞Ìöå"""
        try:
            conn = sqlite3.connect(self.db_path)
            
            order_direction = "DESC" if metric in ['aum', 'dividend_yield', 'market_price'] else "ASC"
            
            query = f'''
                SELECT 
                    name, code, category, 
                    COALESCE(aum, 0) as aum, 
                    COALESCE(expense_ratio, 0) as expense_ratio, 
                    COALESCE(dividend_yield, 0) as dividend_yield, 
                    COALESCE(market_price, 0) as market_price, 
                    last_updated
                FROM etf_info
                WHERE COALESCE({metric}, 0) > 0
                ORDER BY {metric} {order_direction}
                LIMIT ?
            '''
            
            df = pd.read_sql_query(query, conn, params=(limit,))
            conn.close()
            
            return df
            
        except Exception as e:
            print(f"‚ùå ÏÉÅÏúÑ ETF Ï°∞Ìöå Ïã§Ìå®: {e}")
            return pd.DataFrame()
    
    def get_update_status(self) -> dict:
        """ÏóÖÎç∞Ïù¥Ìä∏ ÏÉÅÌÉú Ï°∞Ìöå"""
        try:
            # ÌòÑÏû¨ ÏóÖÎç∞Ïù¥Ìä∏ ÏÉÅÌÉú
            current_status = self.update_manager.get_current_status()
            
            # ÏãúÏä§ÌÖú Í±¥Í∞ï ÏÉÅÌÉú
            health = self.update_manager.quick_health_check()
            
            # ÏµúÍ∑º ÏóÖÎç∞Ïù¥Ìä∏ ÌûàÏä§ÌÜ†Î¶¨
            history = self.update_manager.get_update_history(5)
            
            return {
                'current_status': current_status,
                'health': health,
                'recent_history': history,
                'scheduler': {'is_running': False, 'jobs_info': []}  # Í∏∞Î≥∏Í∞í
            }
            
        except Exception as e:
            print(f"‚ùå ÏóÖÎç∞Ïù¥Ìä∏ ÏÉÅÌÉú Ï°∞Ìöå Ïã§Ìå®: {e}")
            return {}
    
    def run_streamlit_dashboard(self):
        """Streamlit Ïõπ ÎåÄÏãúÎ≥¥Îìú Ïã§Ìñâ"""
        if not STREAMLIT_AVAILABLE:
            print("‚ùå StreamlitÏù¥ ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§")
            return
        
        st.set_page_config(
            page_title="ETF Î™®ÎãàÌÑ∞ÎßÅ ÎåÄÏãúÎ≥¥Îìú",
            page_icon="üìä",
            layout="wide",
            initial_sidebar_state="expanded"
        )
        
        st.title("üìä ETF Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ ÎåÄÏãúÎ≥¥Îìú")
        st.markdown("---")
        
        # ÏÇ¨Ïù¥ÎìúÎ∞î - Ï†úÏñ¥Ìåê
        st.sidebar.title("üéõÔ∏è Ï†úÏñ¥Ìåê")
        
        # Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ ÌÜ†Í∏Ä
        auto_refresh = st.sidebar.checkbox("üîÑ ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® (30Ï¥à)", value=False)
        
        if auto_refresh:
            time.sleep(30)
            st.rerun()
        
        # ÏàòÎèô ÏÉàÎ°úÍ≥†Ïπ®
        if st.sidebar.button("üîÑ ÏàòÎèô ÏÉàÎ°úÍ≥†Ïπ®"):
            st.rerun()
        
        # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉÅÌÉú ÌëúÏãú
        st.sidebar.markdown("### üìä ÏãúÏä§ÌÖú ÏÉÅÌÉú")
        health = self.update_manager.quick_health_check()
        st.sidebar.metric("ÏãúÏä§ÌÖú Í±¥Í∞ïÎèÑ", f"{health.get('health_score', 0):.1f}%")
        st.sidebar.metric("Ï¥ù ETF", f"{health.get('total_etfs', 0)}Í∞ú")
        
        # Î©îÏù∏ ÌÉ≠ Íµ¨ÏÑ±
        tab1, tab2, tab3, tab4 = st.tabs([
            "üè† ÏãúÏû• ÌòÑÌô©", "üìà ÏóÖÎç∞Ïù¥Ìä∏ ÏÉÅÌÉú", "üîç ETF Í≤ÄÏÉâ", "üìä ÏÑ±Í≥º Î∂ÑÏÑù"
        ])
        
        with tab1:
            self._render_market_overview()
        
        with tab2:
            self._render_update_status()
        
        with tab3:
            self._render_etf_search()
        
        with tab4:
            self._render_performance_analysis()
    
    def _render_market_overview(self):
        """ÏãúÏû• ÌòÑÌô© ÌÉ≠ Î†åÎçîÎßÅ"""
        st.header("üè† ETF ÏãúÏû• ÌòÑÌô©")
        
        # ÏãúÏû• Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        market_data = self.get_market_overview()
        
        if not market_data:
            st.error("‚ùå ÏãúÏû• Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§")
            return
        
        overview = market_data['overview']
        
        # Ï£ºÏöî ÏßÄÌëú Ïπ¥Îìú
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "Ï¥ù ETF Í∞úÏàò",
                f"{overview['total_etfs']:,}Í∞ú"
            )
        
        with col2:
            st.metric(
                "Ï¥ù ÏàúÏûêÏÇ∞",
                f"{overview['total_aum']:,.0f}ÏñµÏõê"
            )
        
        with col3:
            st.metric(
                "ÌèâÍ∑† Ïö¥Ïö©Î≥¥Ïàò",
                f"{overview['avg_expense_ratio']:.3f}%"
            )
        
        with col4:
            st.metric(
                "24ÏãúÍ∞Ñ ÎÇ¥ ÏóÖÎç∞Ïù¥Ìä∏",
                f"{overview['updated_24h']}Í∞ú"
            )
        
        # Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Î∂ÑÌè¨
        st.subheader("üìä Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Î∂ÑÌè¨")
        
        if market_data['category_stats']:
            category_df = pd.DataFrame(market_data['category_stats'])
            
            if not category_df.empty:
                col1, col2 = st.columns(2)
                
                with col1:
                    # ÌååÏù¥ Ï∞®Ìä∏
                    fig_pie = px.pie(
                        category_df, 
                        values='total_aum', 
                        names='category',
                        title="Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏàúÏûêÏÇ∞ ÎπÑÏ§ë"
                    )
                    st.plotly_chart(fig_pie, use_container_width=True)
                
                with col2:
                    # Î∞î Ï∞®Ìä∏
                    fig_bar = px.bar(
                        category_df, 
                        x='category', 
                        y='count',
                        title="Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ETF Í∞úÏàò"
                    )
                    st.plotly_chart(fig_bar, use_container_width=True)
        
        # ÏÉÅÏúÑ ETF Î¶¨Ïä§Ìä∏
        st.subheader("üèÜ ÏÉÅÏúÑ ETF (ÏàúÏûêÏÇ∞ Í∏∞Ï§Ä)")
        top_etfs = self.get_top_etfs('aum', 10)
        
        if not top_etfs.empty:
            # ÌëúÏãúÏö© Îç∞Ïù¥ÌÑ∞ Í∞ÄÍ≥µ
            display_df = top_etfs.copy()
            display_df['ÏàúÏûêÏÇ∞'] = display_df['aum'].apply(lambda x: f"{x:,.0f}ÏñµÏõê")
            display_df['Ïö¥Ïö©Î≥¥Ïàò'] = display_df['expense_ratio'].apply(lambda x: f"{x:.3f}%")
            display_df['Î∞∞ÎãπÏàòÏùµÎ•†'] = display_df['dividend_yield'].apply(lambda x: f"{x:.2f}%")
            
            st.dataframe(
                display_df[['name', 'code', 'category', 'ÏàúÏûêÏÇ∞', 'Ïö¥Ïö©Î≥¥Ïàò', 'Î∞∞ÎãπÏàòÏùµÎ•†']],
                use_container_width=True
            )
        else:
            st.warning("üìä ETF Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§")
    
    def _render_update_status(self):
        """ÏóÖÎç∞Ïù¥Ìä∏ ÏÉÅÌÉú ÌÉ≠ Î†åÎçîÎßÅ"""
        st.header("üìà ÏóÖÎç∞Ïù¥Ìä∏ ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ")
        
        # ÏóÖÎç∞Ïù¥Ìä∏ ÏÉÅÌÉú Î°úÎìú
        status_data = self.get_update_status()
        
        if not status_data:
            st.error("‚ùå ÏóÖÎç∞Ïù¥Ìä∏ ÏÉÅÌÉú Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§")
            return
        
        # ÌòÑÏû¨ ÏÉÅÌÉú
        current = status_data.get('current_status', {})
        health = status_data.get('health', {})
        
        # ÏÉÅÌÉú ÌëúÏãú
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if current.get('is_updating'):
                st.error(f"üîÑ ÏóÖÎç∞Ïù¥Ìä∏ ÏßÑÌñâ Ï§ë ({current.get('progress', 0):.1f}%)")
            else:
                st.success("‚úÖ ÏóÖÎç∞Ïù¥Ìä∏ ÎåÄÍ∏∞ Ï§ë")
        
        with col2:
            health_score = health.get('health_score', 0)
            if health_score > 80:
                st.success(f"üíö ÏãúÏä§ÌÖú Í±¥Í∞ï: {health_score:.1f}%")
            elif health_score > 50:
                st.warning(f"üíõ ÏãúÏä§ÌÖú Ï£ºÏùò: {health_score:.1f}%")
            else:
                st.error(f"‚ù§Ô∏è ÏãúÏä§ÌÖú ÏúÑÌóò: {health_score:.1f}%")
        
        with col3:
            last_update = current.get('last_update', 'Ïïå Ïàò ÏóÜÏùå')
            st.info(f"üïê ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏: {last_update}")
        
        # ÏàòÎèô ÏóÖÎç∞Ïù¥Ìä∏ Î≤ÑÌäº
        st.subheader("üîß ÏàòÎèô ÏóÖÎç∞Ïù¥Ìä∏")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("‚ö° Îπ†Î•∏ ÏóÖÎç∞Ïù¥Ìä∏ (5Í∞ú ETF)"):
                with st.spinner("ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ Ï§ë..."):
                    try:
                        summary = self.update_manager.batch_update_all_etfs(max_etfs=5, delay_between_updates=0.5)
                        if summary:
                            st.success(f"‚úÖ ÏôÑÎ£å: {summary.success_rate:.1f}% ÏÑ±Í≥µ")
                        else:
                            st.error("‚ùå ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®")
                    except Exception as e:
                        st.error(f"‚ùå Ïò§Î•ò: {e}")
        
        with col2:
            if st.button("üîÑ ÏùºÎ∞ò ÏóÖÎç∞Ïù¥Ìä∏ (10Í∞ú ETF)"):
                with st.spinner("ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ Ï§ë..."):
                    try:
                        summary = self.update_manager.batch_update_all_etfs(max_etfs=10, delay_between_updates=1.0)
                        if summary:
                            st.success(f"‚úÖ ÏôÑÎ£å: {summary.success_rate:.1f}% ÏÑ±Í≥µ")
                        else:
                            st.error("‚ùå ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®")
                    except Exception as e:
                        st.error(f"‚ùå Ïò§Î•ò: {e}")
        
        with col3:
            if st.button("üöÄ Ï†ÑÏ≤¥ ÏóÖÎç∞Ïù¥Ìä∏"):
                st.warning("‚ö†Ô∏è Ï†ÑÏ≤¥ ÏóÖÎç∞Ïù¥Ìä∏Îäî ÏãúÍ∞ÑÏù¥ Ïò§Îûò Í±∏Î¶ΩÎãàÎã§")
        
        # ÏóÖÎç∞Ïù¥Ìä∏ ÌûàÏä§ÌÜ†Î¶¨
        st.subheader("üìã ÏµúÍ∑º ÏóÖÎç∞Ïù¥Ìä∏ ÌûàÏä§ÌÜ†Î¶¨")
        
        history = status_data.get('recent_history', [])
        if history:
            history_df = pd.DataFrame(history)
            history_df['ÏãúÏûëÏãúÍ∞Ñ'] = pd.to_datetime(history_df['start_time']).dt.strftime('%m-%d %H:%M')
            history_df['ÏÑ±Í≥µÎ•†'] = history_df['success_rate'].apply(lambda x: f"{x:.1f}%")
            history_df['ÏÜåÏöîÏãúÍ∞Ñ'] = history_df['total_duration'].apply(lambda x: f"{x:.1f}Ï¥à")
            
            st.dataframe(
                history_df[['ÏãúÏûëÏãúÍ∞Ñ', 'total_etfs', 'successful_updates', 'failed_updates', 'ÏÑ±Í≥µÎ•†', 'ÏÜåÏöîÏãúÍ∞Ñ']],
                use_container_width=True
            )
        else:
            st.info("üìù ÏóÖÎç∞Ïù¥Ìä∏ ÌûàÏä§ÌÜ†Î¶¨Í∞Ä ÏóÜÏäµÎãàÎã§")
    
    def _render_etf_search(self):
        """ETF Í≤ÄÏÉâ ÌÉ≠ Î†åÎçîÎßÅ"""
        st.header("üîç ETF Í≤ÄÏÉâ Î∞è ÎπÑÍµê")
        
        # Í≤ÄÏÉâ ÌïÑÌÑ∞
        st.subheader("üéØ Í≤ÄÏÉâ ÌïÑÌÑ∞")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            max_expense = st.slider("ÏµúÎåÄ Ïö¥Ïö©Î≥¥Ïàò (%)", 0.0, 1.0, 0.5, 0.01)
        
        with col2:
            min_aum = st.number_input("ÏµúÏÜå ÏàúÏûêÏÇ∞ (ÏñµÏõê)", 0, 100000, 1000, 100)
        
        with col3:
            categories = ['Ï†ÑÏ≤¥', 'domestic_equity', 'foreign_equity', 'bonds', 'alternatives', 'thematic']
            selected_category = st.selectbox("Ïπ¥ÌÖåÍ≥†Î¶¨", categories)
        
        # Í≤ÄÏÉâ Ïã§Ìñâ
        if st.button("üîç Í≤ÄÏÉâ Ïã§Ìñâ"):
            criteria = {
                'expense_ratio_max': max_expense,
                'aum_min': min_aum,
                'sort_by': 'aum',
                'sort_direction': 'DESC',
                'limit': 20
            }
            
            if selected_category != 'Ï†ÑÏ≤¥':
                criteria['category'] = selected_category
            
            search_results = self.screener.screen_by_criteria(criteria)
            
            if not search_results.empty:
                st.subheader(f"üìä Í≤ÄÏÉâ Í≤∞Í≥º ({len(search_results)}Í∞ú)")
                
                # Í≤∞Í≥º ÌëúÏãú
                display_df = search_results.copy()
                display_df['ÏàúÏûêÏÇ∞'] = display_df['aum'].apply(lambda x: f"{x:,.0f}ÏñµÏõê")
                display_df['Ïö¥Ïö©Î≥¥Ïàò'] = display_df['expense_ratio'].apply(lambda x: f"{x:.3f}%")
                
                st.dataframe(
                    display_df[['name', 'code', 'category', 'ÏàúÏûêÏÇ∞', 'Ïö¥Ïö©Î≥¥Ïàò', 'fund_company']],
                    use_container_width=True
                )
            else:
                st.warning("üîç Í≤ÄÏÉâ Ï°∞Í±¥Ïóê ÎßûÎäî ETFÍ∞Ä ÏóÜÏäµÎãàÎã§")
        
        # ETF ÎπÑÍµê
        st.subheader("‚öñÔ∏è ETF ÎπÑÍµê")
        
        etf_codes = st.text_input(
            "ÎπÑÍµêÌï† ETF ÏΩîÎìú ÏûÖÎ†• (ÏâºÌëúÎ°ú Íµ¨Î∂Ñ)",
            placeholder="Ïòà: 069500,360750,114260"
        )
        
        if st.button("‚öñÔ∏è ÎπÑÍµê Ïã§Ìñâ") and etf_codes:
            codes = [code.strip() for code in etf_codes.split(',')]
            comparison_df = self.analyzer.compare_etfs(codes)
            
            if not comparison_df.empty:
                st.subheader("üìä ÎπÑÍµê Í≤∞Í≥º")
                st.dataframe(comparison_df, use_container_width=True)
                
                # ÎπÑÍµê Ï∞®Ìä∏
                if len(comparison_df) > 1:
                    fig = go.Figure()
                    
                    fig.add_trace(go.Bar(
                        x=comparison_df['name'],
                        y=comparison_df['expense_ratio'],
                        name='Ïö¥Ïö©Î≥¥Ïàò (%)',
                        yaxis='y'
                    ))
                    
                    fig.add_trace(go.Scatter(
                        x=comparison_df['name'],
                        y=comparison_df['aum'],
                        mode='lines+markers',
                        name='ÏàúÏûêÏÇ∞ (ÏñµÏõê)',
                        yaxis='y2'
                    ))
                    
                    fig.update_layout(
                        title="ETF ÎπÑÍµê Ï∞®Ìä∏",
                        yaxis=dict(title="Ïö¥Ïö©Î≥¥Ïàò (%)"),
                        yaxis2=dict(title="ÏàúÏûêÏÇ∞ (ÏñµÏõê)", overlaying='y', side='right')
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
            else:
                st.error("‚ùå ÎπÑÍµêÌï† ETF Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§")
    
    def _render_performance_analysis(self):
        """ÏÑ±Í≥º Î∂ÑÏÑù ÌÉ≠ Î†åÎçîÎßÅ"""
        st.header("üìä ETF ÏÑ±Í≥º Î∂ÑÏÑù")
        
        # Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Î∂ÑÏÑù
        st.subheader("üìà Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Ìä∏Î†åÎìú")
        
        trends = self.analyzer.analyze_category_trends()
        if not trends.empty:
            # ÏàúÏûêÏÇ∞ Í∏∞Ï§Ä ÏÉÅÏúÑ Ïπ¥ÌÖåÍ≥†Î¶¨
            fig = px.bar(
                trends.head(10),
                x='category',
                y='total_aum',
                title="Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Ï¥ù ÏàúÏûêÏÇ∞"
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # ÏÉÅÏÑ∏ ÌÖåÏù¥Î∏î
            st.dataframe(trends, use_container_width=True)
        else:
            st.info("üìä Î∂ÑÏÑùÌï† Îç∞Ïù¥ÌÑ∞Í∞Ä Ï∂©Î∂ÑÌïòÏßÄ ÏïäÏäµÎãàÎã§")
        
        # ÎπÑÏö© Ìö®Ïú®ÏÑ± Î∂ÑÏÑù
        st.subheader("üí∞ ÎπÑÏö© Ìö®Ïú®ÏÑ± Î∂ÑÏÑù")
        
        efficiency = self.analyzer.analyze_cost_efficiency()
        if not efficiency.empty:
            # Ìö®Ïú®ÏÑ± ÏÉÅÏúÑ ETF
            top_efficient = efficiency.head(15)
            
            fig = px.scatter(
                top_efficient,
                x='expense_ratio',
                y='aum',
                size='efficiency_ratio',
                hover_name='name',
                title="ETF ÎπÑÏö© Ìö®Ïú®ÏÑ± (ÌÅ¨Í∏∞: Ìö®Ïú®ÏÑ± Ï†êÏàò)"
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("üìä ÎπÑÏö© Ìö®Ïú®ÏÑ± Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§")
    
    def run_cli_dashboard(self):
        """CLI Î≤ÑÏ†Ñ ÎåÄÏãúÎ≥¥Îìú"""
        print("üìä ETF Î™®ÎãàÌÑ∞ÎßÅ CLI ÎåÄÏãúÎ≥¥Îìú")
        print("=" * 60)
        
        while True:
            try:
                print("\nüéØ Î©îÎâ¥ ÏÑ†ÌÉù:")
                print("1. ÏãúÏû• ÌòÑÌô©")
                print("2. ÏóÖÎç∞Ïù¥Ìä∏ ÏÉÅÌÉú")
                print("3. ETF Í≤ÄÏÉâ")
                print("4. ÏàòÎèô ÏóÖÎç∞Ïù¥Ìä∏")
                print("5. ÏãúÏä§ÌÖú ÏÉÅÌÉú")
                print("6. Ï¢ÖÎ£å")
                
                choice = input("\nÏÑ†ÌÉù (1-6): ").strip()
                
                if choice == "1":
                    self._cli_market_overview()
                elif choice == "2":
                    self._cli_update_status()
                elif choice == "3":
                    self._cli_etf_search()
                elif choice == "4":
                    self._cli_manual_update()
                elif choice == "5":
                    self._cli_system_status()
                elif choice == "6":
                    print("üëã ÎåÄÏãúÎ≥¥ÎìúÎ•º Ï¢ÖÎ£åÌï©ÎãàÎã§")
                    break
                else:
                    print("‚ùå 1-6 Ï§ëÏóêÏÑú ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî")
            
            except KeyboardInterrupt:
                print("\n\nüëã ÏÇ¨Ïö©ÏûêÏóê ÏùòÌï¥ Ï¢ÖÎ£åÎê®")
                break
            except Exception as e:
                print(f"\n‚ùå Ïò§Î•ò Î∞úÏÉù: {e}")
    
    def _cli_market_overview(self):
        """CLI ÏãúÏû• ÌòÑÌô©"""
        print("\nüè† ETF ÏãúÏû• ÌòÑÌô©")
        print("-" * 40)
        
        market_data = self.get_market_overview()
        if market_data:
            overview = market_data['overview']
            print(f"Ï¥ù ETF: {overview['total_etfs']}Í∞ú")
            print(f"Ï¥ù ÏàúÏûêÏÇ∞: {overview['total_aum']:,.0f}ÏñµÏõê")
            print(f"ÌèâÍ∑† Ïö¥Ïö©Î≥¥Ïàò: {overview['avg_expense_ratio']:.3f}%")
            print(f"24ÏãúÍ∞Ñ ÎÇ¥ ÏóÖÎç∞Ïù¥Ìä∏: {overview['updated_24h']}Í∞ú")
            
            print("\nüìä Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Î∂ÑÌè¨:")
            for cat in market_data['category_stats']:
                print(f"- {cat['category']}: {cat['count']}Í∞ú, {cat['total_aum']:,.0f}ÏñµÏõê")
    
    def _cli_update_status(self):
        """CLI ÏóÖÎç∞Ïù¥Ìä∏ ÏÉÅÌÉú"""
        print("\nüìà ÏóÖÎç∞Ïù¥Ìä∏ ÏÉÅÌÉú")
        print("-" * 40)
        
        status_data = self.get_update_status()
        if status_data:
            current = status_data['current_status']
            health = status_data['health']
            
            print(f"ÏóÖÎç∞Ïù¥Ìä∏ ÏßÑÌñâ Ï§ë: {'Ïòà' if current.get('is_updating') else 'ÏïÑÎãàÏò§'}")
            print(f"ÏãúÏä§ÌÖú Í±¥Í∞ïÎèÑ: {health.get('health_score', 0):.1f}%")
            print(f"ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏: {current.get('last_update', 'Ïïå Ïàò ÏóÜÏùå')}")
            
            history = status_data.get('recent_history', [])
            if history:
                print("\nüìã ÏµúÍ∑º ÏóÖÎç∞Ïù¥Ìä∏ ÌûàÏä§ÌÜ†Î¶¨:")
                for i, record in enumerate(history[:3]):
                    print(f"{i+1}. {record['start_time'][:19]} - "
                          f"ÏÑ±Í≥µÎ•† {record['success_rate']:.1f}%")
    
    def _cli_etf_search(self):
        """CLI ETF Í≤ÄÏÉâ"""
        print("\nüîç ETF Í≤ÄÏÉâ")
        print("-" * 40)
        
        try:
            max_expense = float(input("ÏµúÎåÄ Ïö¥Ïö©Î≥¥Ïàò (%, Ïòà: 0.5): ") or "0.5")
            min_aum = int(input("ÏµúÏÜå ÏàúÏûêÏÇ∞ (ÏñµÏõê, Ïòà: 1000): ") or "1000")
            
            criteria = {
                'expense_ratio_max': max_expense,
                'aum_min': min_aum,
                'sort_by': 'aum',
                'limit': 10
            }
            
            results = self.screener.screen_by_criteria(criteria)
            
            if not results.empty:
                print(f"\nüìä Í≤ÄÏÉâ Í≤∞Í≥º ({len(results)}Í∞ú):")
                for _, etf in results.iterrows():
                    print(f"- {etf['name']} ({etf['code']}): {etf['aum']:,.0f}ÏñµÏõê, {etf['expense_ratio']:.3f}%")
            else:
                print("üîç Í≤ÄÏÉâ Ï°∞Í±¥Ïóê ÎßûÎäî ETFÍ∞Ä ÏóÜÏäµÎãàÎã§")
                
        except ValueError:
            print("‚ùå Ïò¨Î∞îÎ•∏ Ïà´ÏûêÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî")
    
    def _cli_manual_update(self):
        """CLI ÏàòÎèô ÏóÖÎç∞Ïù¥Ìä∏"""
        print("\nüîß ÏàòÎèô ÏóÖÎç∞Ïù¥Ìä∏")
        print("-" * 40)
        
        print("1. Îπ†Î•∏ ÏóÖÎç∞Ïù¥Ìä∏ (5Í∞ú ETF)")
        print("2. ÏùºÎ∞ò ÏóÖÎç∞Ïù¥Ìä∏ (10Í∞ú ETF)")
        print("3. Í∞úÎ≥Ñ ETF ÏóÖÎç∞Ïù¥Ìä∏")
        
        choice = input("ÏÑ†ÌÉù: ").strip()
        
        try:
            if choice == "1":
                print("‚ö° Îπ†Î•∏ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ Ï§ë...")
                summary = self.update_manager.batch_update_all_etfs(max_etfs=5)
                if summary:
                    print(f"‚úÖ ÏôÑÎ£å: {summary.success_rate:.1f}% ÏÑ±Í≥µ")
            
            elif choice == "2":
                print("üîÑ ÏùºÎ∞ò ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ Ï§ë...")
                summary = self.update_manager.batch_update_all_etfs(max_etfs=10)
                if summary:
                    print(f"‚úÖ ÏôÑÎ£å: {summary.success_rate:.1f}% ÏÑ±Í≥µ")
            
            elif choice == "3":
                code = input("ETF ÏΩîÎìú ÏûÖÎ†•: ").strip()
                if code:
                    print(f"üîÑ {code} ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë...")
                    result = self.update_manager.update_single_etf(code, f"ETF_{code}")
                    print(f"Í≤∞Í≥º: {result.status}")
                    
        except Exception as e:
            print(f"‚ùå ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: {e}")
    
    def _cli_system_status(self):
        """CLI ÏãúÏä§ÌÖú ÏÉÅÌÉú"""
        print("\n‚öôÔ∏è ÏãúÏä§ÌÖú ÏÉÅÌÉú")
        print("-" * 40)
        
        health = self.update_manager.quick_health_check()
        if health.get('status') != 'error':
            print(f"Ï¥ù ETF: {health['total_etfs']}Í∞ú")
            print(f"ÏóÖÎç∞Ïù¥Ìä∏Îêú ETF: {health['updated_etfs']}Í∞ú")
            print(f"Í∞ÄÍ≤© Ï†ïÎ≥¥ Î≥¥Ïú†: {health['price_available']}Í∞ú")
            print(f"24ÏãúÍ∞Ñ ÎÇ¥ ÏóÖÎç∞Ïù¥Ìä∏: {health['recent_updates_24h']}Í∞ú")
            print(f"ÏãúÏä§ÌÖú Í±¥Í∞ïÎèÑ: {health['health_score']:.1f}%")
        else:
            print(f"‚ùå ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®: {health.get('error')}")


# ==========================================
# Ïã§Ìñâ ÏòàÏ†ú Î∞è ÌÖåÏä§Ìä∏ ÏΩîÎìú
# ==========================================

def main():
    """Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò"""
    print("üìä ETF Î™®ÎãàÌÑ∞ÎßÅ ÎåÄÏãúÎ≥¥Îìú")
    print("=" * 60)
    
    dashboard = ETFDashboard()
    
    if STREAMLIT_AVAILABLE:
        print("üåê Streamlit Ïõπ ÎåÄÏãúÎ≥¥ÎìúÎ•º ÏãúÏûëÌï©ÎãàÎã§...")
        print("Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú http://localhost:8501 ÏúºÎ°ú Ï†ëÏÜçÌïòÏÑ∏Ïöî")
        dashboard.run_streamlit_dashboard()
    else:
        print("üíª CLI ÎåÄÏãúÎ≥¥ÎìúÎ•º ÏãúÏûëÌï©ÎãàÎã§...")
        dashboard.run_cli_dashboard()

if __name__ == "__main__":
    # StreamlitÏúºÎ°ú Ïã§ÌñâÎêòÎäî Í≤ΩÏö∞
    if STREAMLIT_AVAILABLE and len(sys.argv) > 1 and 'streamlit' in sys.argv[0]:
        dashboard = ETFDashboard()
        dashboard.run_streamlit_dashboard()
    else:
        main()